apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana-noperator
  labels:
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/component: grafana
    spec:
      initContainers:
      - name: fetch-dashboards
        image: alpine
        command: 
        - /bin/sh
        - -c
        - | 
          apk add curl 
          apk add jq
          APISERVER=https://kubernetes.default.svc            
          SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount      
          NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)      
          TOKEN=$(cat ${SERVICEACCOUNT}/token)      
          CACERT=${SERVICEACCOUNT}/ca.crt
          
          curl -s --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/grafana-noperator/configmaps?labelSelector=grafana%2Fscrape%3Ddashboard | jq -r '.items[].metadata.name' | while read cm; do
            mkdir -p /grafana-dashboard-definitions/0/${cm}
            curl -s --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/grafana-noperator/configmaps/${cm} | jq -r '.data.dashboard' > /grafana-dashboard-definitions/0/${cm}/${cm}.json
          done
        volumeMounts:
        - mountPath: /grafana-dashboard-definitions/0
          name: grafana-dashboard-definitions
      containers:
      - image: grafana/grafana:9.1.6
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards
        - mountPath: /tmp
          name: tmp-plugins
        - mountPath: /grafana-dashboard-definitions/0/
          name: grafana-dashboard-definitions
        - mountPath: /etc/grafana
          name: grafana-config  
      volumes:
      - emptyDir: {}
        name: grafana-storage
      - emptyDir: {}
        name: grafana-dashboard-definitions
      - name: grafana-datasources
        secret:
          defaultMode: 420
          secretName: grafana-datasources
      - configMap:
          defaultMode: 420
          name: grafana-dashboards
        name: grafana-dashboards
      - emptyDir:
          medium: Memory
        name: tmp-plugins
      - configMap:
          defaultMode: 420
          name: grafana-dashboard-workload-total
        name: grafana-dashboard-workload-total
      - name: grafana-config
        secret:
          defaultMode: 420
          secretName: grafana-config